6^4
7^
4
factoril(5)
factorial(5)
5*4*3*2
factorial(7)/(factorial(2)*factorial(2))
factorial(11)/(factorial(4)*factorial(4)*factorial(2))
factorial(8)/factorial(2)
84/12
6*7^2-84*7+3
age <- c(16,25,45,49,64,70,39)
systolic <- c(109,122,132,199,185,199,143)
plot(age,systolic)
cor(age,systolic)
lines(lm(systolic~age))
lines(lm(systolic ~ age))
data <- c(age,systolic)
lm(systolic ~ age)
79.733+1.7724(40)
79.733 + 1.7724*(40)
79.733 + 1.7724*(82)
x <- 1:10
y <- rnorm(10,mean=0.5,sd=0.1)
plot(x,y)
x1 <- x
x2 <- 1:10
x <- c(x1,x2)
y2 <- rnorm(10,mean=0.5,sd=0.1)
y <- c(y, y2)
plot(x,y)
x1
y2
x1*y2
plot(x1,x1*y2)
28.79*log(75/250)/log(.5)
log(75/250)/log(.5)
factorial(12)/(factorial(5)*factorial(7))
factorial(10)/(factorial(5)*factorial(5))
252*792
factorial(5)
120*199584
3^5
factorial(5)/(factorial(1)*factorial(4))
factorial(5)/(factorial(2)*factorial(3))
factorial(5)/(factorial(24*factorial(1))
factorial(5)/(factorial(4)*factorial(1))
3^4
81*5
expData <- rexp(1E6,2)
sqrtData <- sqrt(expData)
par(mfrow=(c(1,2)))
par(mfg=c(1,1,1,2))
hist(expData,100)
par(mfg=c(1,2,1,2))
hist(sqrtData,100)
dev.new()
par(mfrow=c(1,1))
boxplot(expData,sqrtData,main="Moramarco")
factorial(11)/(factorial(8)*factorial(3))
(4/52)*(3/51)
3/51
(factorial(4)/(factorial(2)*factorial(2)))
(factorial(52)/(factorial(50)*factorial(2)))
6/1326
=13*6/1326
13*6/1326
(13*12*11)/(52*51*50)
(13*12*11)/(52*51*50)+(39*13*12)/(52*51*50)
(13*12*11)/(52*51*50)/((13*12*11)/(52*51*50)+(39*13*12)/(52*51*50))
=exp(-3)
exp(-3)
1-exp(-3)
1-exp(-3)-3*exp(-3)-(9/2)*exp(-3)
.05768/.9502
.5768/.9502
1-exp(1.4)-1.4*exp(1.4)
1-exp(-1.4)-1.4*exp(-1.4)
choose(100,10)
choose(94,10)/choose(100,10)
choose(6,1)*choose(94,9)/choose(100/10)
choose(6,1)*choose(94,9)/choose(100,10)
1-choose(94,10)/choose(100,10)-choose(6,1)*choose(94,9)/choose(100,10)-choose(6,2)*choose(94,8)/choose(100,10)
norminv(0.9)
qnorm(.9,0,1)
qnorm(.9,0,1)*2+12
qnorm(.9)
150*.95
sqrt(4)
sqrt(150*.95*.05)
-3/sqrt(150*.95*.05)
pnorm(1.123903)
1-(1-pnorm(1.123903))
pnorm(-1.123903)
69/448 / 5/28
(69/448) / (5/28)
69/80
# 99% confidence interval (assumes normal distribution)
x <- c(9.34,9.45,9.33,9.44,8.95)
xbar <- mean(x)
n <- length(x)
sigma <- 0.2
sem <- sigma/sqrt(n)
E <- qnorm(0.995)*sem
sample_mean + c(-E, E)
# Sample size needed for mean within 0.2 and 99% confidence
needed_E <- 0.2
needed_n <- ((qnorm(0.995)*sigma)/needed_E)^2
needed_n
# 99% confidence interval for population variance
df <- n-1
sample_var <- var(x)
chi_lower <- qchisq(.99/2,df)
chi_upper <- qchisq((1-.99)/2,df)
pop_var_lower <- df*sample_var/chi_lower
pop_var_upper <- df*sample_var/chi_upper
pop_var_lower
pop_var_upper
# 99% confidence interval (assumes normal distribution)
x <- c(9.34,9.45,9.33,9.44,8.95)
xbar <- mean(x)
n <- length(x)
sigma <- 0.2
sem <- sigma/sqrt(n)
E <- qnorm(0.995)*sem
xbar + c(-E, E)
# Sample size needed for mean within 0.2 and 99% confidence
needed_E <- 0.2
needed_n <- ((qnorm(0.995)*sigma)/needed_E)^2
needed_n
# 99% confidence interval for population variance
df <- n-1
sample_var <- var(x)
chi_lower <- qchisq(.99/2,df)
chi_upper <- qchisq((1-.99)/2,df)
pop_var_lower <- df*sample_var/chi_lower
pop_var_upper <- df*sample_var/chi_upper
pop_var_lower
pop_var_upper
x_data <- c(44.9,45.3,43.5,44.5,45.7,45.5,45.0,47.0)
x_bar <- mean(x_data)
sd <- sd(x_data)
mu0 <- 50
n_x <- length(x_data)
t <- (x_bar-mu0)/(sd/sqrt(n_x))
alpha <- 0.01
t.alpha <- qt(1-alpha,df=n_x-1)
-t.alpha
x_data <- c(44.9,45.3,43.5,44.5,45.7,45.5,45.0,47.0)
x_bar <- mean(x_data)
sd <- sd(x_data)
mu0 <- 50
n_x <- length(x_data)
t <- (x_bar-mu0)/(sd/sqrt(n_x))
alpha <- 0.01
t.alpha <- qt(1-alpha,df=n_x-1)
t
-t.alpha
pval <- pt(t,df=n_x-1)
pval
x_data <- c(44.9,45.3,43.5,44.5,45.7,45.5,45.0,47.0)
x_bar <- mean(x_data)
sd <- sd(x_data)
mu0 <- 50
n_x <- length(x_data)
t <- (x_bar-mu0)/(sd/sqrt(n_x))
pval <- pt(t,df=n_x-1)
pval
sd
chi_sq <- (n_x-1)*sd^2/sd0^2
sd0 <- 0.5
chi_sq <- (n_x-1)*sd^2/sd0^2
chi_sq
pchisq(chi_sq,n_x-1)
pchisq(chi_sq,n_x-1, lower.tail=FALSE)
library(swirl)
swirl()
update_swirl()
install.packages("installr")
install.packages(c("boot", "class", "cluster", "devtools", "digest", "evaluate", "foreign", "httr", "KernSmooth", "lattice", "markdown", "MASS", "Matrix", "mgcv", "mvtnorm", "nlme", "nnet", "plotrix", "plyr", "rattle", "RGtk2", "rpart", "spatial"))
library(swirl)
library("swirl")
install.packages("swirl")
library("swirl")
update_swirl()
swirl()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times= 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num _vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Matt Moramarco")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
quit()
library(swirl)
swirl()
exit
quit()
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y,z),100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVecto)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(data = 1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","Weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(myData) <- cnames
myData
debug(ls)
ls
debug(ls)
ls(myData)
exit
quit()
quit()
exit()
setwd("~/Projects/datasciencecoursera/Getting and Cleaning Data/Peer Assignment")
trainData <- read.table("/UCI HAR Dataset/train/X_train.txt")
trainLabel <- read.table("/UCI HAR Dataset//train/y_train.txt")
trainSubject <- read.table("/UCI HAR Dataset/train/subject_train.txt")
testData <- read.table("/UCI HAR Dataset/test/X_test.txt")
testLabel <- read.table("/UCI HAR Dataset/test/y_test.txt")
testSubject <- read.table("/UCI HAR Dataset/test/subject_test.txt")
joinedData <- rbind(trainData, testData)
joinedLabel <- rbind(trainLabel, testLabel)
joinedSubject <- rbind(trainSubject, testSubject)
features <- read.table("/UCI HAR Dataset/features.txt")
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", features[, 2])
joinedData <- joinedData[, meanStdIndices]
names(joinedData) <- gsub("\\(\\)", "", features[meanStdIndices, 2])
names(joinedData) <- gsub("mean", "Mean", names(joinedData))
names(joinedData) <- gsub("std", "Std", names(joinedData))
names(joinedData) <- gsub("-", "", names(joinedData))
activity <- read.table("/UCI HAR Dataset/activity_labels.txt")
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinLabel[, 1], 2]
joinedLabel[, 1] <- activityLabel
names(joinLabel) <- "activity"
names(joinedSubject) <- "subject"
cleanedData <- cbind(joinedSubject, joinedLabel, joinedData)
write.table(cleanedData, "merged_data.txt")
subjectLen <- length(table(joinSubject))
activityLen <- dim(activity)[1]
columnLen <- dim(cleanedData)[2]
result <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
result <- as.data.frame(result)
colnames(result) <- colnames(cleanedData)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinSubject)[, 1])[i]
result[row, 2] <- activity[j, 2]
bool1 <- i == cleanedData$subject
bool2 <- activity[j, 2] == cleanedData$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
write.table(result, "data_with_means.txt")
trainData <- read.table("UCI HAR Dataset/train/X_train.txt")
trainLabel <- read.table("UCI HAR Dataset//train/y_train.txt")
trainSubject <- read.table("UCI HAR Dataset/train/subject_train.txt")
testData <- read.table("UCI HAR Dataset/test/X_test.txt")
trainData <- read.table("UCI HAR Dataset/train/X_train.txt")
trainLabel <- read.table("UCI HAR Dataset//train/y_train.txt")
trainSubject <- read.table("UCI HAR Dataset/train/subject_train.txt")
testData <- read.table("UCI HAR Dataset/test/X_test.txt")
testLabel <- read.table("UCI HAR Dataset/test/y_test.txt")
testSubject <- read.table("UCI HAR Dataset/test/subject_test.txt")
joinedData <- rbind(trainData, testData)
joinedLabel <- rbind(trainLabel, testLabel)
joinedSubject <- rbind(trainSubject, testSubject)
features <- read.table("UCI HAR Dataset/features.txt")
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", features[, 2])
joinedData <- joinedData[, meanStdIndices]
names(joinedData) <- gsub("\\(\\)", "", features[meanStdIndices, 2])
names(joinedData) <- gsub("mean", "Mean", names(joinedData))
names(joinedData) <- gsub("std", "Std", names(joinedData))
names(joinedData) <- gsub("-", "", names(joinedData))
activity <- read.table("UCI HAR Dataset/activity_labels.txt")
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinLabel[, 1], 2]
joinedLabel[, 1] <- activityLabel
names(joinLabel) <- "activity"
names(joinedSubject) <- "subject"
cleanedData <- cbind(joinedSubject, joinedLabel, joinedData)
write.table(cleanedData, "merged_data.txt")
subjectLen <- length(table(joinSubject))
activityLen <- dim(activity)[1]
columnLen <- dim(cleanedData)[2]
result <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
result <- as.data.frame(result)
colnames(result) <- colnames(cleanedData)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinSubject)[, 1])[i]
result[row, 2] <- activity[j, 2]
bool1 <- i == cleanedData$subject
bool2 <- activity[j, 2] == cleanedData$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
write.table(result, "data_with_means.txt")
trainData <- read.table("UCI HAR Dataset/train/X_train.txt")
trainLabel <- read.table("UCI HAR Dataset//train/y_train.txt")
trainSubject <- read.table("UCI HAR Dataset/train/subject_train.txt")
testData <- read.table("UCI HAR Dataset/test/X_test.txt")
testLabel <- read.table("UCI HAR Dataset/test/y_test.txt")
testSubject <- read.table("UCI HAR Dataset/test/subject_test.txt")
joinedData <- rbind(trainData, testData)
joinedLabel <- rbind(trainLabel, testLabel)
joinedSubject <- rbind(trainSubject, testSubject)
features <- read.table("UCI HAR Dataset/features.txt")
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", features[, 2])
joinedData <- joinedData[, meanStdIndices]
names(joinedData) <- gsub("\\(\\)", "", features[meanStdIndices, 2])
names(joinedData) <- gsub("mean", "Mean", names(joinedData))
names(joinedData) <- gsub("std", "Std", names(joinedData))
names(joinedData) <- gsub("-", "", names(joinedData))
activity <- read.table("UCI HAR Dataset/activity_labels.txt")
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinedLabel[, 1], 2]
joinedLabel[, 1] <- activityLabel
names(joinedLabel) <- "activity"
names(joinedSubject) <- "subject"
cleanedData <- cbind(joinedSubject, joinedLabel, joinedData)
write.table(cleanedData, "merged_data.txt")
subjectLen <- length(table(joinedSubject))
activityLen <- dim(activity)[1]
columnLen <- dim(cleanedData)[2]
result <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
result <- as.data.frame(result)
colnames(result) <- colnames(cleanedData)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinSubject)[, 1])[i]
result[row, 2] <- activity[j, 2]
bool1 <- i == cleanedData$subject
bool2 <- activity[j, 2] == cleanedData$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
write.table(result, "data_with_means.txt")
trainData <- read.table("UCI HAR Dataset/train/X_train.txt")
trainLabel <- read.table("UCI HAR Dataset//train/y_train.txt")
trainSubject <- read.table("UCI HAR Dataset/train/subject_train.txt")
testData <- read.table("UCI HAR Dataset/test/X_test.txt")
testLabel <- read.table("UCI HAR Dataset/test/y_test.txt")
testSubject <- read.table("UCI HAR Dataset/test/subject_test.txt")
joinedData <- rbind(trainData, testData)
joinedLabel <- rbind(trainLabel, testLabel)
joinedSubject <- rbind(trainSubject, testSubject)
features <- read.table("UCI HAR Dataset/features.txt")
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", features[, 2])
joinedData <- joinedData[, meanStdIndices]
names(joinedData) <- gsub("\\(\\)", "", features[meanStdIndices, 2])
names(joinedData) <- gsub("mean", "Mean", names(joinedData))
names(joinedData) <- gsub("std", "Std", names(joinedData))
names(joinedData) <- gsub("-", "", names(joinedData))
activity <- read.table("UCI HAR Dataset/activity_labels.txt")
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinedLabel[, 1], 2]
joinedLabel[, 1] <- activityLabel
names(joinedLabel) <- "activity"
names(joinedSubject) <- "subject"
cleanedData <- cbind(joinedSubject, joinedLabel, joinedData)
write.table(cleanedData, "merged_data.txt")
subjectLen <- length(table(joinedSubject))
activityLen <- dim(activity)[1]
columnLen <- dim(cleanedData)[2]
result <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
result <- as.data.frame(result)
colnames(result) <- colnames(cleanedData)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinedSubject)[, 1])[i]
result[row, 2] <- activity[j, 2]
bool1 <- i == cleanedData$subject
bool2 <- activity[j, 2] == cleanedData$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
write.table(result, "data_with_means.txt")
